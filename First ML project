{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNJIQdHGMDuXBW93JBx9Fd0"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bWr8UXYgrgJ2"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Load Data\n"
      ],
      "metadata": {
        "id": "9BQQcMcIrjxo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv(\"https://raw.githubusercontent.com/dataprofessor/data/refs/heads/master/delaney_solubility_with_descriptors.csv\")\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "UX0rYa14rqHg",
        "outputId": "5950fc5f-e00c-4dd0-a49b-071cd315502d"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      MolLogP    MolWt  NumRotatableBonds  AromaticProportion   logS\n",
              "0     2.59540  167.850                0.0            0.000000 -2.180\n",
              "1     2.37650  133.405                0.0            0.000000 -2.000\n",
              "2     2.59380  167.850                1.0            0.000000 -1.740\n",
              "3     2.02890  133.405                1.0            0.000000 -1.480\n",
              "4     2.91890  187.375                1.0            0.000000 -3.040\n",
              "...       ...      ...                ...                 ...    ...\n",
              "1139  1.98820  287.343                8.0            0.000000  1.144\n",
              "1140  3.42130  286.114                2.0            0.333333 -4.925\n",
              "1141  3.60960  308.333                4.0            0.695652 -3.893\n",
              "1142  2.56214  354.815                3.0            0.521739 -3.790\n",
              "1143  2.02164  179.219                1.0            0.461538 -2.581\n",
              "\n",
              "[1144 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aaa5d17a-09cd-4659-8757-6a0ae6f967cb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MolLogP</th>\n",
              "      <th>MolWt</th>\n",
              "      <th>NumRotatableBonds</th>\n",
              "      <th>AromaticProportion</th>\n",
              "      <th>logS</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.59540</td>\n",
              "      <td>167.850</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-2.180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.37650</td>\n",
              "      <td>133.405</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-2.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.59380</td>\n",
              "      <td>167.850</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-1.740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.02890</td>\n",
              "      <td>133.405</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-1.480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.91890</td>\n",
              "      <td>187.375</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-3.040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>1.98820</td>\n",
              "      <td>287.343</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>3.42130</td>\n",
              "      <td>286.114</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.333333</td>\n",
              "      <td>-4.925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>3.60960</td>\n",
              "      <td>308.333</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.695652</td>\n",
              "      <td>-3.893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>2.56214</td>\n",
              "      <td>354.815</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.521739</td>\n",
              "      <td>-3.790</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>2.02164</td>\n",
              "      <td>179.219</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.461538</td>\n",
              "      <td>-2.581</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1144 rows Ã— 5 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aaa5d17a-09cd-4659-8757-6a0ae6f967cb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aaa5d17a-09cd-4659-8757-6a0ae6f967cb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aaa5d17a-09cd-4659-8757-6a0ae6f967cb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-57db580b-b759-40f6-94be-a7ef7ee0aefe\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-57db580b-b759-40f6-94be-a7ef7ee0aefe')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-57db580b-b759-40f6-94be-a7ef7ee0aefe button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e123fe68-209d-4f40-abe9-375a96a0504c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e123fe68-209d-4f40-abe9-375a96a0504c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1144,\n  \"fields\": [\n    {\n      \"column\": \"MolLogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.866002824775324,\n        \"min\": -7.571399999999989,\n        \"max\": 10.388599999999991,\n        \"num_unique_values\": 930,\n        \"samples\": [\n          2.0437,\n          1.0428,\n          0.4903\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MolWt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.6204995656741,\n        \"min\": 16.043,\n        \"max\": 780.9490000000001,\n        \"num_unique_values\": 806,\n        \"samples\": [\n          132.12599999999998,\n          194.194,\n          226.276\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRotatableBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.627398498656514,\n        \"min\": 0.0,\n        \"max\": 23.0,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          0.0,\n          3.0,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AromaticProportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.343305175882067,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.5,\n          0.2727272727272727,\n          0.8571428571428571\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"logS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.0965019290656026,\n        \"min\": -11.6,\n        \"max\": 1.58,\n        \"num_unique_values\": 743,\n        \"samples\": [\n          -1.7,\n          -6.62,\n          -3.324\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "DN-r8t0b7hBJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Preperation\n",
        "### Data Seperation as X and Y"
      ],
      "metadata": {
        "id": "YlcutFWismhb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y = df['logS']\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "TSBCrF6Is199",
        "outputId": "aa7c4ec9-a7e7-46a8-b0f7-1ad6dcd337f0"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      -2.180\n",
              "1      -2.000\n",
              "2      -1.740\n",
              "3      -1.480\n",
              "4      -3.040\n",
              "        ...  \n",
              "1139    1.144\n",
              "1140   -4.925\n",
              "1141   -3.893\n",
              "1142   -3.790\n",
              "1143   -2.581\n",
              "Name: logS, Length: 1144, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>logS</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-2.180</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-2.000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-3.040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>1.144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>-4.925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>-3.893</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>-3.790</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>-2.581</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1144 rows Ã— 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = df.drop('logS',axis=1)\n",
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "CppjWtUbs-nI",
        "outputId": "7af5a6f0-9a3e-4297-f692-6d42dadec50d"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      MolLogP    MolWt  NumRotatableBonds  AromaticProportion\n",
              "0     2.59540  167.850                0.0            0.000000\n",
              "1     2.37650  133.405                0.0            0.000000\n",
              "2     2.59380  167.850                1.0            0.000000\n",
              "3     2.02890  133.405                1.0            0.000000\n",
              "4     2.91890  187.375                1.0            0.000000\n",
              "...       ...      ...                ...                 ...\n",
              "1139  1.98820  287.343                8.0            0.000000\n",
              "1140  3.42130  286.114                2.0            0.333333\n",
              "1141  3.60960  308.333                4.0            0.695652\n",
              "1142  2.56214  354.815                3.0            0.521739\n",
              "1143  2.02164  179.219                1.0            0.461538\n",
              "\n",
              "[1144 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a7285386-cb29-4050-80d2-3b33b36e9538\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MolLogP</th>\n",
              "      <th>MolWt</th>\n",
              "      <th>NumRotatableBonds</th>\n",
              "      <th>AromaticProportion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.59540</td>\n",
              "      <td>167.850</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.37650</td>\n",
              "      <td>133.405</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.59380</td>\n",
              "      <td>167.850</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.02890</td>\n",
              "      <td>133.405</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.91890</td>\n",
              "      <td>187.375</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1139</th>\n",
              "      <td>1.98820</td>\n",
              "      <td>287.343</td>\n",
              "      <td>8.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1140</th>\n",
              "      <td>3.42130</td>\n",
              "      <td>286.114</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1141</th>\n",
              "      <td>3.60960</td>\n",
              "      <td>308.333</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.695652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1142</th>\n",
              "      <td>2.56214</td>\n",
              "      <td>354.815</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.521739</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1143</th>\n",
              "      <td>2.02164</td>\n",
              "      <td>179.219</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.461538</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1144 rows Ã— 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a7285386-cb29-4050-80d2-3b33b36e9538')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a7285386-cb29-4050-80d2-3b33b36e9538 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a7285386-cb29-4050-80d2-3b33b36e9538');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c1306411-7cd2-4cde-856a-131546931217\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c1306411-7cd2-4cde-856a-131546931217')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c1306411-7cd2-4cde-856a-131546931217 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9d3a198d-3f8b-4689-92a1-fdf50bb10591\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('x')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9d3a198d-3f8b-4689-92a1-fdf50bb10591 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('x');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x",
              "summary": "{\n  \"name\": \"x\",\n  \"rows\": 1144,\n  \"fields\": [\n    {\n      \"column\": \"MolLogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.866002824775324,\n        \"min\": -7.571399999999989,\n        \"max\": 10.388599999999991,\n        \"num_unique_values\": 930,\n        \"samples\": [\n          2.0437,\n          1.0428,\n          0.4903\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MolWt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 102.6204995656741,\n        \"min\": 16.043,\n        \"max\": 780.9490000000001,\n        \"num_unique_values\": 806,\n        \"samples\": [\n          132.12599999999998,\n          194.194,\n          226.276\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRotatableBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.627398498656514,\n        \"min\": 0.0,\n        \"max\": 23.0,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          0.0,\n          3.0,\n          16.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AromaticProportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.343305175882067,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0.5,\n          0.2727272727272727,\n          0.8571428571428571\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Data Splitting\n"
      ],
      "metadata": {
        "id": "rksrVb8stUG4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "dVWMKmaLtWHa"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, random_state=100)\n"
      ],
      "metadata": {
        "id": "c1-d7zn3tu2Q"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "JhYoYWtBuHYO",
        "outputId": "724c374e-eb87-406b-daf4-36a03c8dcacb"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     MolLogP    MolWt  NumRotatableBonds  AromaticProportion\n",
              "107  3.14280  112.216                5.0            0.000000\n",
              "378 -2.07850  142.070                0.0            0.000000\n",
              "529 -0.47730  168.152                0.0            0.000000\n",
              "546 -0.86740  154.125                0.0            0.000000\n",
              "320  1.62150  100.161                2.0            0.000000\n",
              "..       ...      ...                ...                 ...\n",
              "802  3.00254  250.301                1.0            0.842105\n",
              "53   2.13860   82.146                3.0            0.000000\n",
              "350  5.76304  256.348                0.0            0.900000\n",
              "79   3.89960  186.339               10.0            0.000000\n",
              "792  2.52334  310.297                3.0            0.300000\n",
              "\n",
              "[915 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b71787d1-ecb4-465f-b4f3-08330078ec33\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MolLogP</th>\n",
              "      <th>MolWt</th>\n",
              "      <th>NumRotatableBonds</th>\n",
              "      <th>AromaticProportion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>107</th>\n",
              "      <td>3.14280</td>\n",
              "      <td>112.216</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>378</th>\n",
              "      <td>-2.07850</td>\n",
              "      <td>142.070</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>529</th>\n",
              "      <td>-0.47730</td>\n",
              "      <td>168.152</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>546</th>\n",
              "      <td>-0.86740</td>\n",
              "      <td>154.125</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>320</th>\n",
              "      <td>1.62150</td>\n",
              "      <td>100.161</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>802</th>\n",
              "      <td>3.00254</td>\n",
              "      <td>250.301</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.842105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>2.13860</td>\n",
              "      <td>82.146</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>350</th>\n",
              "      <td>5.76304</td>\n",
              "      <td>256.348</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.900000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>79</th>\n",
              "      <td>3.89960</td>\n",
              "      <td>186.339</td>\n",
              "      <td>10.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>792</th>\n",
              "      <td>2.52334</td>\n",
              "      <td>310.297</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.300000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>915 rows Ã— 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b71787d1-ecb4-465f-b4f3-08330078ec33')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b71787d1-ecb4-465f-b4f3-08330078ec33 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b71787d1-ecb4-465f-b4f3-08330078ec33');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d28f8c13-c694-4719-9888-b3c815c8548e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d28f8c13-c694-4719-9888-b3c815c8548e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d28f8c13-c694-4719-9888-b3c815c8548e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b61da538-7b2c-439c-bc28-60bdac3f236d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('x_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b61da538-7b2c-439c-bc28-60bdac3f236d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('x_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_train",
              "summary": "{\n  \"name\": \"x_train\",\n  \"rows\": 915,\n  \"fields\": [\n    {\n      \"column\": \"MolLogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8379735599136915,\n        \"min\": -7.571399999999989,\n        \"max\": 10.388599999999991,\n        \"num_unique_values\": 767,\n        \"samples\": [\n          2.585,\n          4.515300000000004,\n          1.8437\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MolWt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 101.84523286107176,\n        \"min\": 26.038,\n        \"max\": 780.9490000000001,\n        \"num_unique_values\": 679,\n        \"samples\": [\n          214.294,\n          227.085,\n          429.77200000000016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRotatableBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.7012928712183357,\n        \"min\": 0.0,\n        \"max\": 23.0,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          5.0,\n          4.0,\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AromaticProportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.34322299404825873,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          0.4615384615384615,\n          0.0,\n          0.3571428571428571\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "_NlMteuPuLI3",
        "outputId": "02568b1c-5a71-4616-df60-06d30c4542f2"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      MolLogP    MolWt  NumRotatableBonds  AromaticProportion\n",
              "822   2.91000  172.268                7.0            0.000000\n",
              "118   7.27400  360.882                1.0            0.666667\n",
              "347   1.94040  145.161                0.0            0.909091\n",
              "1123  1.98640  119.378                0.0            0.000000\n",
              "924   1.70062  108.140                0.0            0.750000\n",
              "...       ...      ...                ...                 ...\n",
              "1114  1.76210  478.513                4.0            0.000000\n",
              "427   6.32820  276.338                0.0            1.000000\n",
              "711   0.04430  218.205                5.0            0.000000\n",
              "4     2.91890  187.375                1.0            0.000000\n",
              "948   3.56010  318.328                2.0            0.750000\n",
              "\n",
              "[229 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-86f1c692-fd31-4f83-9b5d-67508a5bb03c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MolLogP</th>\n",
              "      <th>MolWt</th>\n",
              "      <th>NumRotatableBonds</th>\n",
              "      <th>AromaticProportion</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>822</th>\n",
              "      <td>2.91000</td>\n",
              "      <td>172.268</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>7.27400</td>\n",
              "      <td>360.882</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>1.94040</td>\n",
              "      <td>145.161</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.909091</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1123</th>\n",
              "      <td>1.98640</td>\n",
              "      <td>119.378</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>924</th>\n",
              "      <td>1.70062</td>\n",
              "      <td>108.140</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1114</th>\n",
              "      <td>1.76210</td>\n",
              "      <td>478.513</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>427</th>\n",
              "      <td>6.32820</td>\n",
              "      <td>276.338</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>711</th>\n",
              "      <td>0.04430</td>\n",
              "      <td>218.205</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.91890</td>\n",
              "      <td>187.375</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>948</th>\n",
              "      <td>3.56010</td>\n",
              "      <td>318.328</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.750000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>229 rows Ã— 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86f1c692-fd31-4f83-9b5d-67508a5bb03c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-86f1c692-fd31-4f83-9b5d-67508a5bb03c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-86f1c692-fd31-4f83-9b5d-67508a5bb03c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2f94f488-7d12-47d7-ac11-bd97c724bf64\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2f94f488-7d12-47d7-ac11-bd97c724bf64')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2f94f488-7d12-47d7-ac11-bd97c724bf64 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_bd8888ed-d8fc-4d10-867a-8e7807930fc6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('x_test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_bd8888ed-d8fc-4d10-867a-8e7807930fc6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('x_test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_test",
              "summary": "{\n  \"name\": \"x_test\",\n  \"rows\": 229,\n  \"fields\": [\n    {\n      \"column\": \"MolLogP\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.9781161342582056,\n        \"min\": -5.397199999999993,\n        \"max\": 9.8876,\n        \"num_unique_values\": 213,\n        \"samples\": [\n          3.386800000000001,\n          4.102000000000002,\n          2.935900000000001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MolWt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105.78845308303764,\n        \"min\": 16.043,\n        \"max\": 764.9499999999999,\n        \"num_unique_values\": 203,\n        \"samples\": [\n          139.11,\n          232.32700000000003,\n          104.15199999999996\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NumRotatableBonds\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3074347142542226,\n        \"min\": 0.0,\n        \"max\": 14.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          14.0,\n          6.0,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AromaticProportion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.34322081551818723,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          0.4166666666666667,\n          0.2608695652173913,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LyJcoZPQu9r9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Model Building\n"
      ],
      "metadata": {
        "id": "SFIjWYssvx9O"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Linear Regression"
      ],
      "metadata": {
        "id": "Sa37oedp0x5-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Training the model"
      ],
      "metadata": {
        "id": "jyoRyAbbwTpj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "lr = LinearRegression()\n",
        "lr.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "gabqR30iv23f",
        "outputId": "eca6398d-083a-4adc-b636-86528f261b08"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"â–¸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"â–¾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Applying the model to make prediction"
      ],
      "metadata": {
        "id": "pXcgD4uywYRz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_lr_train_pred = lr.predict(x_train)\n",
        "y_lr_test_pred = lr.predict(x_test)"
      ],
      "metadata": {
        "id": "HVkJn_s7wPco"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_lr_train_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ECX9y_FgwzR5",
        "outputId": "59e3a84b-4abe-4d92-d149-d38deb9649fe"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-2.83668969,  0.84208401, -0.50930302, -0.13058053, -1.6269208 ,\n",
              "       -2.86103037, -2.32208333, -4.16684323, -5.04235077, -2.29737009,\n",
              "       -3.15082845, -4.33037208, -1.43700682, -2.59060064, -7.09025955,\n",
              "       -2.32734557, -4.19073421, -2.63904005, -3.58104074, -3.75929058,\n",
              "       -2.5501665 , -3.26968347, -2.78911367, -2.69251051, -0.77437547,\n",
              "       -6.61955792, -2.99084623, -2.36975061, -7.18167736, -1.52816491,\n",
              "       -4.81736265, -0.86996608, -7.09025955, -1.87404275, -2.58013247,\n",
              "       -4.80953284, -4.17454084, -1.95444152, -3.50503339, -2.7411418 ,\n",
              "       -1.87131835, -2.45270806, -3.07252433, -1.48988982, -3.98778754,\n",
              "       -1.35216679, -0.16932277, -6.05237002, -3.29550658,  0.30513174,\n",
              "       -3.25501463, -5.31993586, -0.4733928 , -4.79180882, -5.82486323,\n",
              "       -2.70343539, -3.70838271, -2.4987341 , -2.12301018, -3.11393974,\n",
              "       -2.79842053, -1.38274662, -4.3267103 , -3.57778946, -3.42356884,\n",
              "       -9.15826626, -6.52588866, -1.75832085, -4.97842312, -1.59255758,\n",
              "       -1.91317252, -2.81075595, -1.14056747, -1.6326702 , -1.6269208 ,\n",
              "       -5.33227425, -3.88805074,  0.70432882, -3.99288096, -2.22595859,\n",
              "       -2.63405871, -1.80643013, -4.18615661, -0.32535905, -3.36770115,\n",
              "       -2.94105086, -3.02039211, -2.01312164, -2.97735566, -2.58917919,\n",
              "       -6.78423811, -2.34521849, -3.11841945, -0.8177211 , -1.69000394,\n",
              "       -1.20887457, -3.4996968 , -4.98602607, -4.36391839, -1.59023154,\n",
              "       -1.36030606, -1.97047357, -2.63177729, -2.88308299, -5.15950486,\n",
              "       -5.67559475, -3.04604495, -5.17135083, -1.38069437, -4.57622144,\n",
              "       -3.72245121, -5.49591484, -3.39797976, -6.025302  , -3.80350106,\n",
              "       -5.72200956, -0.20160041, -0.54441899, -1.4937231 , -4.17747099,\n",
              "       -5.31993586, -5.30332414, -4.68554881, -2.54472004, -1.91317252,\n",
              "       -5.0001379 , -1.29322696, -4.9018288 , -5.72200956, -1.63254894,\n",
              "       -0.50844757, -2.79777831, -3.40409244, -3.75108143, -2.13430517,\n",
              "       -2.3552617 , -4.47491213, -1.37020598, -2.98467788, -1.1097015 ,\n",
              "       -2.65582153, -2.03469435, -3.82343254, -3.40409244, -3.86002039,\n",
              "       -1.6454705 , -1.67610138, -2.25004084, -2.35293566, -3.97998511,\n",
              "       -0.45142958, -3.70838271, -3.21804175, -3.26826004, -3.5011185 ,\n",
              "       -0.69767632, -4.61318325, -2.53209123, -1.58352433,  0.11192491,\n",
              "       -2.071356  , -2.52212098, -5.16155398, -3.79386016, -2.05580278,\n",
              "       -3.0712261 , -5.04235077, -4.57622144, -0.59059425, -2.11738204,\n",
              "       -0.14035732, -2.15201095, -3.90580754, -7.85208391, -1.77124241,\n",
              "       -3.87977779, -1.17409032, -5.38735798, -0.38776428, -5.13905974,\n",
              "       -6.52588866, -2.37600268, -3.67042165, -1.13694063, -1.52979384,\n",
              "       -1.08806317, -2.17972634, -1.37566371, -1.69000394, -5.55433014,\n",
              "       -4.38095601, -6.16274514, -5.75210573, -5.38139309, -2.1485872 ,\n",
              "       -2.41257831, -1.21383508, -2.77794109, -2.77375743, -0.97332586,\n",
              "       -0.07359075, -2.97947129, -3.43909806, -3.0639354 , -2.42856294,\n",
              "       -6.51455759, -4.60929775, -3.36134518, -1.66451803, -0.34748753,\n",
              "       -4.91887429, -1.5001642 , -2.55131925, -5.03116753, -1.1504684 ,\n",
              "       -3.58407147, -7.22253774, -0.40922333, -3.44344971, -5.60855562,\n",
              "       -8.54996931, -2.63926987, -1.35467792, -4.73905926, -1.92627702,\n",
              "       -1.76204643, -2.04984044, -6.42989154, -5.4209013 , -5.4954495 ,\n",
              "       -4.91209304, -1.84841838, -3.11841945, -1.19248532, -3.52050251,\n",
              "       -1.6049836 , -3.31107991, -4.69327814,  0.6106115 , -3.60652062,\n",
              "       -4.63133161, -2.5020505 , -1.04661836, -0.70671111, -2.77794109,\n",
              "       -1.96622986, -1.24556874, -2.04067926, -0.47784193, -1.60070017,\n",
              "       -1.73602998, -4.74777582, -2.35789126, -1.89320334, -4.94447725,\n",
              "       -3.52116416, -1.03137202, -2.42722214, -2.41726714, -3.31243827,\n",
              "       -2.45036038, -2.45036038, -2.09804761, -5.79050585, -2.12301018,\n",
              "       -1.69652767, -5.04235077, -2.7183962 , -2.74034339, -3.08792242,\n",
              "        1.16237365, -1.97390964, -2.36955435, -1.59518714, -2.64877661,\n",
              "       -2.72328327, -1.69263351, -3.78676756, -2.70478582, -0.97951662,\n",
              "       -6.17522371, -2.57848244, -4.23239293, -1.56313602, -4.14016489,\n",
              "       -1.89020434, -0.42981761, -2.99158591, -4.47466933, -2.01820507,\n",
              "       -2.27836725, -2.199028  , -4.05306078, -2.47347008, -1.21383508,\n",
              "       -1.74165812, -1.03137202, -6.35437784, -2.13973631, -9.87954886,\n",
              "       -1.51156575, -7.7015858 , -2.99084623, -2.90410699, -4.2232049 ,\n",
              "       -2.01933871, -2.33668279, -2.81929845, -3.12088453, -4.42161212,\n",
              "       -0.83133436, -2.63385972, -2.49648251, -0.79480376, -4.64013859,\n",
              "       -4.39618439, -2.32058101, -2.61616401, -3.36987763, -1.51156575,\n",
              "       -0.76911634, -2.06238448, -2.89331618, -4.57622144, -1.19907316,\n",
              "       -2.72328327, -3.50414148, -3.10460597, -1.21005686, -4.38704198,\n",
              "       -1.92623036, -4.17035059, -4.97728572, -1.79026429, -2.35283034,\n",
              "       -3.59939381, -2.79154825, -3.25842453, -2.25768799, -2.14996491,\n",
              "       -4.95790808, -1.4036531 , -4.64502179, -2.31758244, -3.01521178,\n",
              "       -5.1577739 , -4.68504851, -2.98727379, -2.16925807, -2.65875355,\n",
              "       -4.53388983, -3.39620209, -2.97542583, -2.63426164, -7.77785827,\n",
              "       -2.34848929, -3.95395012, -3.14810449, -2.99620551, -4.19807234,\n",
              "       -2.57905657, -5.72200956, -1.86861231, -1.48463069, -2.03428932,\n",
              "       -7.44538031, -6.08246673, -3.2086445 , -2.137733  , -8.85737405,\n",
              "       -3.15699268, -3.71109719, -0.99642961, -3.14546555, -5.48811295,\n",
              "       -1.14179382, -4.15137001, -0.50933463, -4.69151986, -0.55120689,\n",
              "       -3.24367474, -1.59518714, -4.86486127, -1.10853776, -3.06678132,\n",
              "       -5.01101651, -3.95482844, -1.69000394, -4.69639167, -1.26852213,\n",
              "       -4.30518407, -4.30377221, -2.23526305, -4.34616365, -0.23583339,\n",
              "       -6.05831529, -3.63698515, -4.07880131, -3.2950999 , -1.75169752,\n",
              "       -4.64981547, -2.68788426, -2.81766206, -3.38232674, -2.14927143,\n",
              "       -5.44407214,  1.93550814, -0.12972508, -1.49498387, -2.50036024,\n",
              "       -2.06396429, -5.93855312, -2.53403538, -2.89650533, -1.58868434,\n",
              "       -5.73999593, -1.97390964, -4.64393496, -3.96695922, -1.30865188,\n",
              "       -1.8711556 , -6.01555673, -4.75194249, -2.1532237 , -1.26674801,\n",
              "       -4.60929775, -1.75320392, -3.16591868, -2.35789126, -2.73044354,\n",
              "        1.43453026, -3.29138689, -2.41564138, -3.88412944, -5.4954495 ,\n",
              "       -1.64461506, -2.29089681, -2.32781082, -2.75074329, -3.88113542,\n",
              "       -2.85196407, -1.59255758, -0.83248302, -5.41251959, -3.26968347,\n",
              "       -1.83271568, -2.12301018, -0.45113096, -5.34942367, -0.69635755,\n",
              "       -3.86581957, -3.82343254, -3.71474837, -3.36603645, -4.49530092,\n",
              "       -5.04887579, -5.16431192, -6.08708502, -0.63401868, -2.99158591,\n",
              "       -7.77785827, -1.48607797, -4.66162003, -2.39395831, -3.75517868,\n",
              "       -4.61318325, -4.17747099, -2.199028  , -3.01607829, -2.50036024,\n",
              "       -1.88703307, -3.62102758, -3.51234807, -3.16279877, -7.09898181,\n",
              "       -2.70478582, -3.37625597, -1.83271568, -3.87356837, -1.73865954,\n",
              "       -2.88008616, -2.22977044, -6.70156561, -8.03717765, -5.33606465,\n",
              "       -4.17657514, -5.01827423, -1.39251992, -1.36030606, -1.94448808,\n",
              "       -4.00428682, -4.29865745, -1.3893508 , -0.39302341, -1.51156575,\n",
              "       -2.34521849, -1.29089314, -0.97595542, -2.41038224, -4.0790451 ,\n",
              "       -2.6818627 , -7.27035604, -3.46876907, -0.83629487, -3.25056894,\n",
              "       -2.77794109, -2.70606495, -0.88802552,  0.33102924, -8.73475591,\n",
              "       -6.08789325, -2.49648251, -0.84907925, -3.69568743, -4.37642963,\n",
              "       -0.79254201,  1.98868187, -1.96622986, -2.69309202, -2.75566249,\n",
              "       -2.80004662, -2.92698197, -2.29452458, -4.40478538, -3.41695228,\n",
              "       -2.97735566, -4.53250784, -3.12440723, -1.48607797, -6.64951931,\n",
              "       -1.29322696, -3.59615687, -4.84056475, -2.0637599 , -5.4954495 ,\n",
              "       -1.13275935, -2.80728543, -2.40237156, -2.68666558, -3.44429049,\n",
              "       -2.41959844, -4.95743275, -6.40483191, -5.13905974, -5.05708901,\n",
              "       -1.66084991, -2.37974001, -2.05580278, -3.39656384, -1.42271129,\n",
              "       -2.77786114, -2.30422683, -5.53938357, -4.30027875, -6.08708502,\n",
              "       -1.53182046, -4.03471242, -0.35059383, -3.43858076, -5.34063365,\n",
              "       -2.65303434, -0.32225969, -5.89030528, -1.66084991, -7.09025955,\n",
              "       -1.66084991, -4.32045753, -3.2950999 , -4.00428682, -2.65971931,\n",
              "       -2.61898292, -1.48081884, -3.31248863, -4.1285441 ,  0.81081357,\n",
              "       -0.74032142, -0.55409165, -1.48988982, -4.2835894 , -3.52940291,\n",
              "       -3.67078501, -3.11422447, -1.35216679, -2.33929584, -3.735629  ,\n",
              "       -5.99133424,  1.68379176, -5.72200956, -1.1504684 , -3.78441114,\n",
              "       -2.04833812, -4.23871436, -4.3723975 , -2.25259394, -3.75430163,\n",
              "       -3.79386016, -4.33406929, -0.79254201, -2.72091671, -2.32584014,\n",
              "       -3.04247237, -4.57422729, -2.05580278, -2.19679345,  0.21720962,\n",
              "       -2.33668279, -3.18126918, -5.18323201, -1.1504684 , -2.82306619,\n",
              "       -3.81016932, -0.62641139, -1.79284653, -3.0572287 , -2.68205673,\n",
              "       -3.47393942, -1.35730748, -2.35283034, -5.29861673, -3.42242343,\n",
              "       -2.33668279, -3.15515412, -0.81254078, -2.32158664, -7.23311502,\n",
              "       -4.27331505, -0.41608127, -0.92992939, -2.85102139, -2.38452854,\n",
              "       -1.35467792, -5.35250249, -4.61318325, -3.36770115, -4.54753068,\n",
              "       -1.21120552, -1.41272408, -0.62894611, -5.46722693, -2.80332864,\n",
              "       -4.70222762, -4.20128488, -3.75287911, -2.89485114,  0.44470271,\n",
              "       -2.75272546, -6.40483191, -3.43858076, -1.33564461, -7.39989571,\n",
              "       -2.3552617 , -1.97390964, -3.31913336, -0.99788515, -1.49117202,\n",
              "        2.54283347, -2.57935977, -1.5372532 , -1.46969589, -5.50256395,\n",
              "       -2.84523685, -5.79050585, -0.72972899, -4.50417895, -3.41743324,\n",
              "       -1.89701519, -3.04694269, -1.10327863, -1.48988982, -2.81732645,\n",
              "       -6.11716924, -7.16934656, -1.96622986, -3.91516316, -3.61172065,\n",
              "       -6.40483191, -2.05580278, -3.67078501, -5.54561991, -2.93180057,\n",
              "       -3.27180065, -2.72328327, -2.53353851, -1.11363181, -2.90610261,\n",
              "       -1.10853776, -1.49259585, -1.15572753, -4.70049144,  1.99249372,\n",
              "       -1.80643013, -8.46728525, -4.32045753, -1.19196129, -2.25004084,\n",
              "       -1.94336083, -1.87633593, -9.15826626, -3.65922507, -2.29683578,\n",
              "       -0.5325366 , -7.5914365 , -2.15587374, -1.90396018, -1.78645244,\n",
              "       -4.36890615, -1.91112045, -5.28950294, -3.70838271, -3.34373141,\n",
              "       -3.82343254, -3.84290966, -1.75395277, -2.82944893, -1.92755736,\n",
              "       -3.95353483, -2.51949142, -4.16972153, -0.47784193, -2.80004662,\n",
              "       -2.08049675, -1.57187693, -3.79234971, -1.27341971, -1.10845148,\n",
              "       -3.87977779, -1.08911411, -2.73044354, -1.76722676, -2.22965253,\n",
              "       -3.56321848, -6.67044148, -1.51156575, -0.24983949, -1.72672119,\n",
              "       -2.14897281, -4.05818764, -2.37140338, -1.897265  , -1.42797042,\n",
              "       -3.08706826, -4.24521459, -6.52588866, -4.60929775, -4.67022068,\n",
              "       -2.03122625, -3.11841945, -5.04235077,  0.60553271, -8.46728525,\n",
              "       -4.23480474, -2.75684478, -2.14339849, -1.5231707 , -2.67587664,\n",
              "       -3.59418929, -5.68837433, -5.02111613, -0.94099449, -3.51200413,\n",
              "       -1.41666505, -1.9765392 , -2.67587664, -5.87753962, -3.73205662,\n",
              "       -2.65599022, -2.46014399, -3.93774254, -8.46728525, -0.43381828,\n",
              "       -3.81993282, -3.25038467, -5.64350181, -4.18419436, -6.47162256,\n",
              "       -2.29452458, -3.70387135, -6.42099768, -1.53182046, -2.45533763,\n",
              "       -1.91317252, -2.137733  , -1.31128145, -3.16496704, -2.22556914,\n",
              "       -3.81016932, -2.44235234, -2.76845189, -2.73924332, -1.59715854,\n",
              "       -2.90610261, -7.77785827, -2.74034339, -7.77785827, -6.53218341,\n",
              "       -2.55678026, -2.59432621, -6.06602826, -2.73144347, -2.39319255,\n",
              "       -3.79386016, -6.40483191, -1.32841939, -1.62955037, -4.07880131,\n",
              "       -2.42494059, -6.04136471, -1.63103729, -5.2602532 , -3.86312053,\n",
              "       -2.12601292, -4.28342693, -2.6178098 , -7.14847318, -1.53350725,\n",
              "       -1.08911411, -4.24790282, -4.63837202, -3.79691901, -2.13813936,\n",
              "       -3.86772233, -1.2281273 , -3.7672691 , -4.28538142, -1.43139099,\n",
              "       -3.40980857, -2.6111225 , -1.41272408, -3.07730828, -3.90594959,\n",
              "       -2.35283034, -0.7271857 , -4.19010154, -0.69374352, -1.10472591,\n",
              "       -1.62166167, -3.90123327, -2.78518496, -3.43585411, -3.92684454,\n",
              "       -2.54406861, -1.91317252, -1.77769503, -0.79480376, -4.23915408,\n",
              "       -1.51148185, -1.14665655, -2.00855418, -7.03862139, -2.74305517,\n",
              "       -2.11738204, -3.42356884, -2.49648251, -2.1372074 , -1.88151626,\n",
              "       -1.62653948, -4.00428682, -2.04784256, -4.47943132, -2.61216962,\n",
              "       -1.69531648, -5.54561991, -7.77785827, -2.13315833, -6.08238994,\n",
              "       -0.73579117, -1.90396018, -3.66566374, -3.26337102, -3.5528319 ,\n",
              "       -0.88717007, -4.50417895, -3.93774254, -2.31911758, -1.79407614,\n",
              "       -2.73044354, -1.62464083, -3.36099002, -1.68087565, -4.17747099,\n",
              "       -4.36658559, -2.68703435, -5.54667039, -2.40682831, -5.07481336,\n",
              "       -3.80377549, -2.93847429, -3.69840797, -3.63698515, -2.77930842,\n",
              "       -0.77056362, -2.37730267,  1.68379176, -3.2158222 , -3.70838271,\n",
              "       -3.17308636, -4.36923501, -0.44844001, -5.24894879, -6.52225128,\n",
              "       -1.80406335, -1.80643013, -1.90447849, -5.52193556, -2.07398557,\n",
              "       -3.22132977, -6.70156561, -5.44962012, -1.25610101, -3.35223802,\n",
              "       -3.98606913, -1.89546347, -6.08789325, -3.88711135, -3.78407726])"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_lr_test_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QTCAM4-iw62q",
        "outputId": "7f6e5c55-3916-4de4-86ba-3de286ed8b9e"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-3.05722870e+00, -7.77785827e+00, -2.55016650e+00, -2.01523582e+00,\n",
              "       -2.06375990e+00, -9.99672215e-01, -5.94603364e-01, -5.53626003e-01,\n",
              "       -5.72200956e+00, -3.94006681e+00, -3.95496755e+00, -2.29737009e+00,\n",
              "       -1.48980354e+00, -1.48988982e+00, -4.64510806e+00, -1.90396018e+00,\n",
              "       -1.51566313e+00, -3.16424605e+00, -3.70863920e+00, -5.58105660e+00,\n",
              "       -3.25038467e+00, -5.04235077e+00, -5.69194881e+00, -2.14339849e+00,\n",
              "       -4.35689341e+00, -5.03964756e+00, -3.10383618e+00, -4.40286964e+00,\n",
              "       -4.21276272e+00,  5.56508349e-01, -1.45537678e+00, -4.41027396e+00,\n",
              "       -2.59668773e+00, -1.53336276e+00, -5.55749874e-01, -1.67111795e+00,\n",
              "       -2.78163675e+00, -3.15395565e+00, -5.27083361e+00, -1.75321446e+00,\n",
              "       -1.53350725e+00, -2.01255666e+00, -6.57559167e+00, -7.89433046e+00,\n",
              "       -5.76437127e+00, -4.16422068e+00, -3.43694663e+00,  1.43834212e+00,\n",
              "       -1.12679105e-02, -2.34521849e+00, -1.86480046e+00, -5.03964756e+00,\n",
              "        8.55886378e-01, -3.17679292e+00, -5.06764094e+00, -1.99464442e+00,\n",
              "       -7.77785827e+00, -1.21764693e+00, -9.09541075e-01, -5.04235077e+00,\n",
              "       -2.43898748e+00, -2.84034045e+00, -2.53403538e+00, -2.36170311e+00,\n",
              "       -1.63103729e+00, -1.53182046e+00, -3.23931568e+00, -2.88008616e+00,\n",
              "       -1.88300518e+00, -3.21582220e+00, -3.40245202e+00, -9.01813905e-01,\n",
              "       -4.82308940e+00, -7.69116343e-01, -7.12894308e+00, -1.05440427e+01,\n",
              "       -1.95444152e+00, -3.50194744e+00, -7.18167736e+00, -6.01555673e+00,\n",
              "       -2.08189806e+00, -2.31652280e+00, -3.44556948e+00, -2.05480142e+00,\n",
              "       -6.01555673e+00, -2.88308299e+00, -4.84867198e+00, -3.51006495e-01,\n",
              "       -3.54726250e+00, -1.21057919e+00, -4.36658559e+00, -4.21815903e-01,\n",
              "       -1.63103729e+00, -2.51604291e+00, -2.16707077e+00, -1.48726025e+00,\n",
              "       -3.20864450e+00, -1.51411141e+00, -1.65033691e+00, -3.66287663e+00,\n",
              "       -3.26968347e+00, -3.94492313e+00, -4.22509088e+00, -3.68794650e+00,\n",
              "       -5.98734972e+00, -1.43710934e+00, -1.97653920e+00, -1.85076729e+00,\n",
              "       -1.14179382e+00, -3.07730828e+00, -4.84867198e+00, -2.19679345e+00,\n",
              "       -1.68737438e+00, -2.20390218e+00,  1.89408269e+00, -3.61322115e+00,\n",
              "       -2.79173430e+00, -2.41564138e+00, -7.53910534e-01, -8.54744860e-01,\n",
              "       -9.20407401e-02, -6.14209981e+00, -3.79386016e+00, -7.77785827e+00,\n",
              "       -1.79874130e+00, -2.50544035e+00, -3.77102985e+00, -2.25250766e+00,\n",
              "       -2.57788713e+00, -2.06375990e+00, -3.33843958e+00, -1.03912484e+00,\n",
              "       -6.68946164e+00, -1.91112045e+00, -2.58735850e+00, -2.19902800e+00,\n",
              "       -1.90219551e+00, -2.81396751e+00, -4.16972153e+00, -5.72200956e+00,\n",
              "       -1.60816482e+00, -3.68121117e+00, -4.60929775e+00, -2.45888480e+00,\n",
              "        1.13185484e+00, -1.69279625e+00, -7.09025955e+00, -3.79386016e+00,\n",
              "       -2.99712058e+00, -5.79600137e+00, -2.44845780e+00, -5.29399242e+00,\n",
              "       -5.29389899e-01, -3.53652118e+00, -3.51200413e+00, -2.02419300e+00,\n",
              "       -4.47466933e+00, -3.63836536e+00, -4.56596939e+00, -5.57842703e+00,\n",
              "       -5.30676136e+00, -2.39225449e+00, -4.88290144e+00, -2.61359308e+00,\n",
              "       -3.11841945e+00, -2.05580278e+00, -1.64987419e+00, -4.91881901e+00,\n",
              "       -3.93774254e+00, -4.26411548e+00, -3.15082845e+00, -3.49352203e+00,\n",
              "       -3.81768831e+00, -3.77197350e+00, -2.55016650e+00, -1.97653920e+00,\n",
              "       -2.59432621e+00, -5.38480406e+00, -5.44932525e+00, -3.04107137e+00,\n",
              "       -1.87252408e+00, -2.25124657e+00, -2.89215707e+00, -3.46087334e+00,\n",
              "       -6.06861986e+00, -1.89916369e+00, -1.98035105e+00, -2.45036038e+00,\n",
              "       -2.79393037e+00, -4.76010415e+00, -1.72379306e+00, -7.09025955e+00,\n",
              "       -2.86880150e+00, -2.70674744e+00, -4.36825704e+00, -3.11841945e+00,\n",
              "       -3.85805633e+00,  9.78662246e-03, -4.47466933e+00, -6.08708502e+00,\n",
              "       -5.19970454e+00, -6.40483191e+00, -4.10155218e+00, -1.07044752e+00,\n",
              "        1.99249372e+00, -3.63698515e+00, -8.50933009e-01, -3.26770298e+00,\n",
              "       -4.78343575e+00, -1.48988982e+00, -2.24629276e+00, -4.13247222e+00,\n",
              "       -4.36873484e+00, -1.89724815e+00, -1.50596465e+00, -1.16713539e-02,\n",
              "       -1.73602998e+00, -2.34521849e+00, -4.54942814e-01, -4.18812419e+00,\n",
              "       -1.87770440e+00, -3.70838271e+00, -1.59899899e+00, -3.26143822e+00,\n",
              "       -4.17623614e+00, -6.67872053e+00, -1.23069039e+00, -3.14545964e+00,\n",
              "       -4.79863925e+00])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "***Evaluate Model Performance***"
      ],
      "metadata": {
        "id": "8gXoVFBbxQqe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "lr_train_mse = mean_squared_error(y_train,y_lr_train_pred)\n",
        "lr_train_r2 = r2_score(y_train,y_lr_train_pred)\n",
        "\n",
        "lr_test_mse = mean_squared_error(y_test,y_lr_test_pred)\n",
        "lr_test_r2 = r2_score(y_test,y_lr_test_pred)"
      ],
      "metadata": {
        "id": "nPi-_b0yxeUA"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "print('LR MSE (Train): ', lr_train_mse)\n",
        "print('LR R2 (Train): ', lr_train_r2)\n",
        "print('LR MSE (Test): ', lr_test_mse)\n",
        "print('LR R2 (Test): ', lr_test_r2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5CMpPimSzIl_",
        "outputId": "af32b7b2-9aa7-49fe-9ea3-4e0ed9a522f6"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "LR MSE (Train):  1.0075362951093687\n",
            "LR R2 (Train):  0.7645051774663391\n",
            "LR MSE (Test):  1.0206953660861033\n",
            "LR R2 (Test):  0.7891616188563282\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lr_results = pd.DataFrame(['Linear Regression',lr_train_mse,lr_train_r2,lr_test_mse,lr_test_r2]).transpose()\n",
        "lr_results.columns = ['Method','Training MSE','Training R2','Test MSE','Test R2']"
      ],
      "metadata": {
        "id": "nFcffCarzXiH"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lr_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "cR8umLC80WAg",
        "outputId": "5f35d3eb-05d2-4345-8a06-1872b03eecca"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Method Training MSE Training R2  Test MSE   Test R2\n",
              "0  Linear Regression     1.007536    0.764505  1.020695  0.789162"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d92187c7-b265-40f0-bc76-9dd866835547\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Method</th>\n",
              "      <th>Training MSE</th>\n",
              "      <th>Training R2</th>\n",
              "      <th>Test MSE</th>\n",
              "      <th>Test R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Linear Regression</td>\n",
              "      <td>1.007536</td>\n",
              "      <td>0.764505</td>\n",
              "      <td>1.020695</td>\n",
              "      <td>0.789162</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d92187c7-b265-40f0-bc76-9dd866835547')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d92187c7-b265-40f0-bc76-9dd866835547 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d92187c7-b265-40f0-bc76-9dd866835547');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_9c2c6373-61f8-4a4f-8ae2-7256d84df292\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('lr_results')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9c2c6373-61f8-4a4f-8ae2-7256d84df292 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('lr_results');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "lr_results",
              "summary": "{\n  \"name\": \"lr_results\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Linear Regression\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training MSE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1.0075362951093687,\n        \"max\": 1.0075362951093687,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0075362951093687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training R2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.7645051774663391,\n        \"max\": 0.7645051774663391,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7645051774663391\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test MSE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1.0206953660861033,\n        \"max\": 1.0206953660861033,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0206953660861033\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test R2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.7891616188563282,\n        \"max\": 0.7891616188563282,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7891616188563282\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Random Forest"
      ],
      "metadata": {
        "id": "_dwd_e090qYn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Training the model"
      ],
      "metadata": {
        "id": "2ll0_yLE7laZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "rf = RandomForestRegressor(max_depth=2, random_state=100)\n",
        "rf.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "ECMTzeSv74YA",
        "outputId": "855bf0db-0c51-424f-e7a8-2f60135afddc"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestRegressor(max_depth=2, random_state=100)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"â–¸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"â–¾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_depth=2, random_state=100)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestRegressor</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor(max_depth=2, random_state=100)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Applying the model to make prediction"
      ],
      "metadata": {
        "id": "8wQaPDNW7rLR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y_rf_train_pred = rf.predict(x_train)\n",
        "y_rf_test_pred = rf.predict(x_test)"
      ],
      "metadata": {
        "id": "O8Z9sJif8ZGl"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Evaluate Model Performance"
      ],
      "metadata": {
        "id": "zknu1xm_70CX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "rf_train_mse = mean_squared_error(y_train,y_rf_train_pred)\n",
        "rf_train_r2 = r2_score(y_train,y_rf_train_pred)\n",
        "\n",
        "rf_test_mse = mean_squared_error(y_test,y_rf_test_pred)\n",
        "rf_test_r2 = r2_score(y_test,y_rf_test_pred)"
      ],
      "metadata": {
        "id": "OtQHWxNQ72KA"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf_results = pd.DataFrame(['Random Forest',rf_train_mse,rf_train_r2,rf_test_mse,rf_test_r2]).transpose()\n",
        "rf_results.columns = ['Method','Training MSE','Training R2','Test MSE','Test R2']"
      ],
      "metadata": {
        "id": "R5jb_w5M8-Lf"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "rf_results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "SM4fgmMa9Jw4",
        "outputId": "73d3c002-ecdc-4e4f-956b-cce69868dbbc"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Method Training MSE Training R2  Test MSE   Test R2\n",
              "0  Random Forest     1.028228    0.759669  1.407688  0.709223"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cb034ac8-0db9-4076-8a87-bbf51367da96\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Method</th>\n",
              "      <th>Training MSE</th>\n",
              "      <th>Training R2</th>\n",
              "      <th>Test MSE</th>\n",
              "      <th>Test R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>1.028228</td>\n",
              "      <td>0.759669</td>\n",
              "      <td>1.407688</td>\n",
              "      <td>0.709223</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cb034ac8-0db9-4076-8a87-bbf51367da96')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cb034ac8-0db9-4076-8a87-bbf51367da96 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cb034ac8-0db9-4076-8a87-bbf51367da96');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_89b9e7a9-ad43-4d94-92cc-328357c3aa45\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('rf_results')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_89b9e7a9-ad43-4d94-92cc-328357c3aa45 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('rf_results');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "rf_results",
              "summary": "{\n  \"name\": \"rf_results\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Random Forest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training MSE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1.028227802112806,\n        \"max\": 1.028227802112806,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.028227802112806\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training R2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.7596688824431413,\n        \"max\": 0.7596688824431413,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7596688824431413\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test MSE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1.407688264904896,\n        \"max\": 1.407688264904896,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.407688264904896\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test R2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.7092230211002489,\n        \"max\": 0.7092230211002489,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.7092230211002489\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Comparison\n"
      ],
      "metadata": {
        "id": "QVP-VAFl9SsJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_models = pd.concat([lr_results,rf_results],axis=0)\n",
        "df_models"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 125
        },
        "id": "Q5w0Kv1T9OUJ",
        "outputId": "c91e08f2-f754-4d76-d2e3-40e0f5f7ed48"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Method Training MSE Training R2  Test MSE   Test R2\n",
              "0  Linear Regression     1.007536    0.764505  1.020695  0.789162\n",
              "0      Random Forest     1.028228    0.759669  1.407688  0.709223"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f971563c-dc61-489f-a9c9-cf118c9008f1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Method</th>\n",
              "      <th>Training MSE</th>\n",
              "      <th>Training R2</th>\n",
              "      <th>Test MSE</th>\n",
              "      <th>Test R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Linear Regression</td>\n",
              "      <td>1.007536</td>\n",
              "      <td>0.764505</td>\n",
              "      <td>1.020695</td>\n",
              "      <td>0.789162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>1.028228</td>\n",
              "      <td>0.759669</td>\n",
              "      <td>1.407688</td>\n",
              "      <td>0.709223</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f971563c-dc61-489f-a9c9-cf118c9008f1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f971563c-dc61-489f-a9c9-cf118c9008f1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f971563c-dc61-489f-a9c9-cf118c9008f1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fed246df-952b-4be1-8800-c2026e3b9ee8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fed246df-952b-4be1-8800-c2026e3b9ee8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fed246df-952b-4be1-8800-c2026e3b9ee8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_e198aca4-cee9-4944-81d8-a9872282e8e7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_models')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e198aca4-cee9-4944-81d8-a9872282e8e7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_models');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_models",
              "summary": "{\n  \"name\": \"df_models\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Random Forest\",\n          \"Linear Regression\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training MSE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1.0075362951093687,\n        \"max\": 1.028227802112806,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.028227802112806,\n          1.0075362951093687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training R2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.7596688824431413,\n        \"max\": 0.7645051774663391,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7596688824431413,\n          0.7645051774663391\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test MSE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1.0206953660861033,\n        \"max\": 1.407688264904896,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.407688264904896,\n          1.0206953660861033\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test R2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.7092230211002489,\n        \"max\": 0.7891616188563282,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7092230211002489,\n          0.7891616188563282\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_models.reset_index(drop=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "zifIpaze9jju",
        "outputId": "fbd1c972-ef38-4b87-8317-d5c487c3d26f"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Method Training MSE Training R2  Test MSE   Test R2\n",
              "0  Linear Regression     1.007536    0.764505  1.020695  0.789162\n",
              "1      Random Forest     1.028228    0.759669  1.407688  0.709223"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9d8288db-0b06-4f4a-bf25-931776bfea52\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Method</th>\n",
              "      <th>Training MSE</th>\n",
              "      <th>Training R2</th>\n",
              "      <th>Test MSE</th>\n",
              "      <th>Test R2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Linear Regression</td>\n",
              "      <td>1.007536</td>\n",
              "      <td>0.764505</td>\n",
              "      <td>1.020695</td>\n",
              "      <td>0.789162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Random Forest</td>\n",
              "      <td>1.028228</td>\n",
              "      <td>0.759669</td>\n",
              "      <td>1.407688</td>\n",
              "      <td>0.709223</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d8288db-0b06-4f4a-bf25-931776bfea52')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9d8288db-0b06-4f4a-bf25-931776bfea52 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9d8288db-0b06-4f4a-bf25-931776bfea52');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1259da74-96e6-4a84-899f-c4ee305890ef\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1259da74-96e6-4a84-899f-c4ee305890ef')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1259da74-96e6-4a84-899f-c4ee305890ef button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_models\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Random Forest\",\n          \"Linear Regression\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training MSE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1.0075362951093687,\n        \"max\": 1.028227802112806,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.028227802112806,\n          1.0075362951093687\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Training R2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.7596688824431413,\n        \"max\": 0.7645051774663391,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7596688824431413,\n          0.7645051774663391\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test MSE\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 1.0206953660861033,\n        \"max\": 1.407688264904896,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.407688264904896,\n          1.0206953660861033\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Test R2\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": 0.7092230211002489,\n        \"max\": 0.7891616188563282,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.7092230211002489,\n          0.7891616188563282\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Visulaization of prediction Results\n"
      ],
      "metadata": {
        "id": "z_juHZVe-DIO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Prediction result graph from LR"
      ],
      "metadata": {
        "id": "8EG3ZxXxAeWd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "plt.figure(figsize=(5,5))\n",
        "plt.scatter(x=y_train, y=y_lr_train_pred,c=\"#7CAE00\", alpha = 0.4)\n",
        "z = np.polyfit(y_train,y_lr_train_pred,1)\n",
        "p = np.poly1d(z)\n",
        "plt.plot(y_train,p(y_train), '#F8766D')\n",
        "plt.ylabel(\"Predict LogS\")\n",
        "plt.xlabel(\"Experimental LogS\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "g5TTZQ7_-HB2",
        "outputId": "374fbd77-f912-4670-9faa-b9e0fa6b25b7"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Experimental LogS')"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "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667jxhtvZN26dTz22GO8853vnO2wZoWPf/zjzJkzZ7bDmFE2bdpEEAR84xvf4MUXX+TLX/4yX//61/nbv/3b2Q5t2vjRj37EzTffzG233cZzzz3H6aefzuWXX05vb+9shzYjPPzww9x00008+eST3Hvvvbiuy2WXXUahUBj/SYREIoTo6+sTgHjkkUeqx7LZrADEvffeO4uRzRyu64q5c+eKb3/727Mdyqzz61//WqxYsUK8+OKLAhDPP//8bIc0a9x5551i0aJFsx3GtHHuueeKm266qfrY930xZ84ccfvtt89iVLNHb2+vAMTDDz887vfIjFQCQGNjI8uXL+f73/8+hUIBz/P4xje+QUtLC2edddZshzcjPPfcc+zbtw9VVTnjjDNob2/nDW94Ay+88MJshzaj9PT08N73vpf/9//+H7FYbLbDmXUymQwNDQ2zHca04DgOzz77LJdeemn1mKqqXHrppTzxxBOzGNnskclkACb0N5dCKgFAURTuu+8+nn/+eZLJJJFIhC996Uv89re/pb6+frbDmxFefvllAD7zmc/wyU9+kl/96lfU19dz4YUXMjg4OMvRzQxCCG644Qbe//73c/bZZ892OLPOtm3b+NrXvsb73ve+2Q5lWujv78f3fVpbW2uOt7a2nlRbOiMEQcBf/dVf8epXv5pXvvKV436fFNITnFtuuQVFUQ77s2nTJoQQ3HTTTbS0tPDoo4/y9NNP89a3vpU3v/nNdHV1zfZlTIrx3oMgCAD4u7/7O97+9rdz1llncffdd6MoCj/+8Y9n+Somx3jvwde+9jVyuRy33nrrbIc8pYz3+kezb98+rrjiCq6++mre+973zlLkkpnkpptu4oUXXuCHP/zhhN4nLQJPcPr6+hgYGDjsaxYvXsyjjz7KZZddxtDQUM0YpWXLlvGe97yHW265ZbpDnTbGew8ee+wxLr74Yh599FEuuOCC6nNr1qzh0ksv5Qtf+MJ0hzptjPceXHPNNfzyl7+smcXr+z6apnHttdfyve99b7pDnRbGe/2maQLQ2dnJhRdeyHnnncd3v/vdI86jPF5xHIdYLMb//M//1FSnX3/99QwPD/Pzn/989oKbYT74wQ/y85//nEceeYRFixZN6L1yHukJTnNzM83NzUd8XbFYBDjoA0NV1Wqmdrwy3ntw1llnYVkWmzdvrgqp67rs3LmTjo6O6Q5zWhnvPfjnf/5nPv/5z1cfd3Z2cvnll/OjH/2INWvWTGeI08p4rx/CTPSiiy6qrkicqCIKYJomZ511Fvfff39VSIMg4P777+eDH/zg7AY3Qwgh+NCHPsT//u//8tBDD01YREEKqaTCq171Kurr67n++uv59Kc/TTQa5Vvf+hY7duzgyiuvnO3wZoRUKsX73/9+brvtNubPn09HRwd33XUXAFdfffUsRzczLFiwoOZxIpEAYMmSJSfFwPt9+/Zx4YUX0tHRwT/90z/R19dXfa6trW0WI5s+br75Zq6//nrOPvtszj33XL7yla9QKBS48cYbZzu0GeGmm27iP//zP/n5z39OMpms7g2n02mi0ej4TjI9BcSS45FnnnlGXHbZZaKhoUEkk0lx3nnniV//+tezHdaM4jiO+OhHPypaWlpEMpkUl156qXjhhRdmO6xZY8eOHSdV+8vdd98tgDF/TmS+9rWviQULFgjTNMW5554rnnzyydkOacY41N/77rvvHvc55B6pRCKRSCST4MRd/JdIJBKJZAaQQiqRSCQSySSQQiqRSCQSySSQQiqRSCQSySSQQiqRSCQSySSQQiqRSCQSySSQQiqRSCQSySSQQiqRHIfccMMNNd6oxyMLFy7kK1/5ymyHIZFMGimkEskY3HDDDWNOCLniiitmOzQAvvrVr/Ld7353tsMAwhF8P/vZz6b8vJ/5zGdYvXr1lJ93NH19fXzgAx9gwYIFWJZFW1sbl19+OY899ti0/l7JiYX02pVIDsEVV1zB3XffXXPMsqxZiibE930URSGdTs9qHCcKb3/723Ech+9973ssXryYnp4e7r///iNOipFIRiMzUonkEIxkKKN/RoacP/TQQ5imyaOPPlp9/Z133klLSws9PT0AXHjhhXzwgx/kgx/8IOl0mqamJj71qU8x2pXTtm3+5m/+hrlz5xKPx1mzZg0PPfRQ9fnvfve71NXV8Ytf/IJTTz0Vy7LYvXv3QUu7F154IR/60If4q7/6K+rr62ltbeVb3/pW1Xw8mUyydOlSfvOb39Rc4wsvvMAb3vAGEokEra2tXHfddfT399ec98Mf/jAf//jHaWhooK2tjc985jPV5xcuXAjA2972NhRFqT7evn07V111Fa2trSQSCc455xzuu+++yfw5DmLDhg1cfPHFRKNRGhsb+Yu/+Avy+Xz1ec/z+PCHP0xdXR2NjY184hOf4Prrr6/et+HhYR599FHuuOMOLrroIjo6Ojj33HO59dZbectb3jKlsUpObKSQSiRHwYUXXshf/dVfcd1115HJZHj++ef51Kc+xbe//W1aW1urr/ve976Hrus8/fTTfPWrX+VLX/oS3/72t6vPf/CDH+SJJ57ghz/8IevXr+fqq6/miiuuYOvWrdXXFItF7rjjDr797W/z4osv0tLSMmZM3/ve92hqauLpp5/mQx/6EB/4wAe4+uqrOf/883nuuee47LLLuO6666oj84aHh7n44os544wz+OMf/8hvf/tbenp6uOaaaw46bzwe56mnnuLOO+/k7//+77n33nsBeOaZZwC4++676erqqj7O5/O88Y1v5P777+f555/niiuu4M1vfjO7d++egrsPhUKByy+/nPr6ep555hl+/OMfc99999WM/rrjjjv4j//4D+6++24ee+wxstlszRJ0IpEgkUjws5/9DNu2pyQuyUnKNBnqSyTHNddff73QNE3E4/Gany984QvV19i2LVavXi2uueYaceqpp4r3vve9Ned43eteJ1auXCmCIKge+8QnPiFWrlwphBBi165dQtM0sW/fvpr3XXLJJeLWW28VQuyfRrJ27dqD4rvqqqtqftcFF1xQfex5nojH4+K6666rHuvq6hKAeOKJJ4QQQnzuc58Tl112Wc159+zZIwCxefPmMc8rhBDnnHOO+MQnPlF9DIj//d//HeMu1vKKV7xCfO1rX6s+7ujoEF/+8pcP+frbbrtNnH766WM+981vflPU19eLfD5fPXbPPfcIVVVFd3e3EEKI1tZWcdddd1Wf9zxPLFiwoOa+/c///I+or68XkUhEnH/++eLWW28V69atO+K1SCSjkXukEskhuOiii/j3f//3mmMNDQ3Vf5umyX/8x39w2mmn0dHRwZe//OWDznHeeeehKEr18ate9Sq++MUv4vs+GzZswPd9TjnllJr32LZNY2Njze857bTTjhjv6NdomkZjYyOrVq2qHhvJlHt7ewFYt24dDz74YHXm6Gi2b99ejevA393e3l49x6HI5/N85jOf4Z577qGrqwvP8yiVSlOWkW7cuJHTTz+deDxePfbqV7+aIAjYvHkzkUiEnp4ezj333OrzmqZx1lln1Qyqf/vb386VV17Jo48+ypNPPslvfvMb7rzzTr797W9zww03TEmskhMfKaQSySGIx+MsXbr0sK95/PHHARgcHGRwcLDmg/1I5PN5NE3j2WefRdO0mudGi1s0Gq0R40NhGEbNY0VRao6NnGNESPL5PG9+85u54447DjpXe3v7Yc87WozG4m/+5m+49957+ad/+ieWLl1KNBrlT/7kT3Ac54jXMdNEIhFe//rX8/rXv55PfepT/Pmf/zm33XabFFLJuJF7pBLJUbJ9+3b++q//mm9961usWbOG66+//iCBeeqpp2oeP/nkkyxbtgxN0zjjjDPwfZ/e3l6WLl1a89PW1jbt8Z955pm8+OKLLFy48KDfP5EvBIZh4Pt+zbHHHnuMG264gbe97W2sWrWKtrY2du7cOWWxr1y5knXr1lEoFGp+p6qqLF++nHQ6TWtra3XPFsKK5+eee+6I5z711FNrziuRHAkppBLJIbBtm+7u7pqfkYpW3/d517vexeWXX86NN97I3Xffzfr16/niF79Yc47du3dz8803s3nzZv7rv/6Lr33ta3zkIx8B4JRTTuHaa6/l3e9+Nz/96U/ZsWMHTz/9NLfffjv33HPPtF/fTTfdxODgIO94xzt45pln2L59O7/73e+48cYbDxLGw7Fw4ULuv/9+uru7GRoaAmDZsmX89Kc/Ze3ataxbt453vvOdR8xix6JUKrF27dqan+3bt3PttdcSiUS4/vrreeGFF3jwwQf50Ic+xHXXXVddwv7Qhz7E7bffzs9//nM2b97MRz7yEYaGhqqZ+cDAABdffDE/+MEPWL9+PTt27ODHP/4xd955J1ddddWEY5WcvMilXYnkEPz2t7+tWeIEWL58OZs2beILX/gCu3bt4le/+hUQLoV+85vf5B3veAeXXXYZp59+OgDvfve7KZVKnHvuuWiaxkc+8hH+4i/+onq+u+++m89//vN89KMfZd++fTQ1NXHeeefxpje9adqvb86cOTz22GN84hOf4LLLLsO2bTo6OrjiiitQ1fF/x/7iF7/IzTffzLe+9S3mzp3Lzp07+dKXvsSf/dmfcf7559PU1MQnPvEJstnshGPcsmULZ5xxRs2xSy65hPvuu4/f/e53fOQjH+Gcc84hFovx9re/nS996UvV133iE5+gu7ubd7/73Wiaxl/8xV9w+eWXV5fRE4kEa9as4ctf/jLbt2/HdV3mz5/Pe9/7Xv72b/92wrFKTl4UIUY1tUkkkinjwgsvZPXq1dIG7xghCAJWrlzJNddcw+c+97nZDkdyAiEzUolEckKya9cufv/73/O6170O27b5l3/5F3bs2ME73/nO2Q5NcoIh90glEskJiaqqfPe73+Wcc87h1a9+NRs2bOC+++5j5cqVsx2a5ARDLu1KJBKJRDIJZEYqkUgkEskkkEIqkUgkEskkkEIqkUgkEskkkEIqkUgkEskkkEIqkUgkEskkkEIqkUgkEskkkEIqkUgkEskkkEIqkUgkEskkkEIqkUgkEskk+P8B7ul0K1RJhJsAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Prediction result graph from RF"
      ],
      "metadata": {
        "id": "WzWbYgC4Ak2M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "plt.figure(figsize=(5,5))\n",
        "plt.scatter(x=y_train, y=y_rf_train_pred,c=\"#7CAE00\", alpha = 0.4)\n",
        "z = np.polyfit(y_train,y_rf_train_pred,1)\n",
        "p = np.poly1d(z)\n",
        "plt.plot(y_train,p(y_train), '#F8766D')\n",
        "plt.ylabel(\"Predict LogS\")\n",
        "plt.xlabel(\"Experimental LogS\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "M91fF_BA-RZH",
        "outputId": "28a74af2-f1a9-4181-f526-e4951ff84ff1"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Experimental LogS')"
            ]
          },
          "metadata": {},
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Comparision of graphs of LR and RF"
      ],
      "metadata": {
        "id": "GgJz667CAo8D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "plt.figure(figsize=(7,7))\n",
        "#Plotting LR predictions\n",
        "plt.scatter(x=y_train, y=y_lr_train_pred,c=\"#7CAE00\", alpha=0.4,label = \"Linear Regression\")\n",
        "z_lr = np.polyfit(y_train,y_lr_train_pred,1)\n",
        "p_lr = np.poly1d(z_lr)\n",
        "plt.plot(y_train,p_lr(y_train), '#F8766D', label = \"Linear Regression Fit\")\n",
        "#Plotting RF predictions\n",
        "plt.scatter(x=y_train, y=y_rf_train_pred, c= \"#00BFC4\", alpha = 0.4, label=\"Random Forest\")\n",
        "z_rf = np.polyfit(y_train, y_rf_train_pred,1)\n",
        "p_rf = np.poly1d(z_rf)\n",
        "plt.plot(y_train,p_rf(y_train),'#C77CFF', label=\"Random Forest Fit\")\n",
        "plt.ylabel(\"Predict LogS\")\n",
        "plt.xlabel(\"Experimental LogS\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 619
        },
        "id": "qKuwJ-cXALUr",
        "outputId": "da96e350-9ecc-4570-f16c-782881cbcd0d"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 700x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "x5PNMWi3AvXJ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}